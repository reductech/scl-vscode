name: scl;
scopeName: source.scl
foldingStartMarker: ^\s*-\s.+
foldingStopMarker: ^\s*$
patterns:
    - include: '#comment'
    - include: '#expression'
repository:
    expression:
        patterns:
        - include: '#date'
        - include: '#boolean-literal'
        - include: '#numeric-literal'
        - include: '#paren-expression'
        - include: '#string-literal'
        - include: '#char-literal'
        - include: '#variable-name'
        - include: '#array'
        - include: '#enum'
        - include: '#command'
        - include: '#pipe'
        - include: '#operator'
        - include: '#propertyName'
        - include: '#step'

    boolean-literal:
        patterns:
        -   name: constant.language.boolean.true.scl
            match: \b[Tt][Rr][Uu][Ee]\b
        -   name: constant.language.boolean.false.scl
            match: \b[Ff][Aa][Ll][Ss][Ee]\b

    numeric-literal:
        name: constant.numeric.decimal.scl
        match: \b[0-9]+(\.[0-9]+)?\b

    variable-name:
        name: variable.language.scl
        match: <[a-zA-Z0-9_]+>
    
    enum:
        name: constant.other.scl
        match: \b[a-zA-Z0-9_]+\.[a-zA-Z0-9_]+\b

    date:
        name: constant.other.scl
        match: \b\d{4}-\d{2}-\d{2}([Tt]\d{2}:\d{2}:\d{2}(\.\d+)?)?\b
        
    command:
        name: keyword.operator.scl
        match: ^\s*-\s
    
    pipe:
        name: keyword.operator.scl
        match: \|

    operator:
        name: keyword.operator.scl
        match: ([\-+*/%^<>=]|(&&)|(\|\|)|(==)|(!=)|(<=)|(>=))

    comma:
        name: punctuation.comma.scl
        match: ","
    
    array:
        begin: (?=(\[))
        beginCaptures:
            '1': { name: punctuation.squarebracket.open.scl }
        end: (?=(\]))
        endCaptures:
            '1': { name: punctuation.squarebracket.close.scl }
        patterns:
        -   begin: (?<=\[)
            end: (?=\])
            patterns:
                - include: '#comment'
                - include: '#expression'
                - include: '#comma'

    propertyName:
        match: (\b[a-zA-Z0-9_]+)(:)
        captures:
            '0': {name: support.function.scl}
            '1': {name: punctuation.colon.scl}


    string-literal:
        name: string.quoted.double.scl
        begin: '"'
        beginCaptures:
            '0': { name: punctuation.definition.string.begin.scl }
        end: '"'
        endCaptures:
            '0': { name: punctuation.definition.string.end.scl }
        patterns:
        - include: '#string-character-escape'

    char-literal:
        name: string.quoted.single.scl
        begin: "'"
        beginCaptures:
            '0': { name: punctuation.definition.char.begin.scl }
        end: "'"
        endCaptures:
            '0': { name: punctuation.definition.char.end.scl }
        patterns:
        - include: '#char-character-escape'

    string-character-escape:
        name: constant.character.escape.scl
        match: \\["\\nrt]

    char-character-escape:
        name: constant.character.escape.scl
        match: "''"

    paren-expression:
        begin: \(
        end: \)
        beginCaptures:
            '0':
                name: punctuation.paren.open.scl
        endCaptures:
            '0':
                name: punctuation.paren.close.scl
        name: expression.group
        patterns:
        - include: '#entity-propertyName'
        - include: '#expression'
        - include: '#comma'
        
    
    entity-propertyName:
        patterns:
        -   match: (\b[a-zA-Z0-9_]+(?:\.[a-zA-Z0-9_]+)*)(:)
            captures:
                '0': {name: entity.name.section.scl}
                '1': {name: punctuation.colon.scl}
        -   match: (\".+?\")(:)
            captures:
                '0': {name: entity.name.section.scl}
                '1': {name: punctuation.colon.scl}
        -   match: ('.+?')(:)
            captures:
                '0': {name: entity.name.section.scl}
                '1': {name: punctuation.colon.scl}


    comment:
        patterns:
        -   name: comment.block.scl
            begin: /\*
            beginCaptures: 
                '0': {name: punctuation.definition.comment.scl}
            end: \*/
            endCaptures: 
                '0': {name: punctuation.definition.comment.scl}
        -   name: comment.line.scl
            begin: '(^\s+)?(?=#)'
            beginCaptures: 
                '1': {name: punctuation.whitespace.comment.leading.scl}
            end: '(?=$)'
            patterns:
            -   name: comment.line.number-sign.scl
                begin: '(?<!/)#(?:(?!/)|(?=#))'
                beginCaptures: 
                    '0': {name: punctuation.definition.comment.scl}
                end: '(?=$)'

    step:
        match: (?i)\b(And|AppendString|ArrayConcat|ArrayDistinct|ArrayFilter|ArrayIsEmpty|ArrayLength|ArrayNew|ArraySort|AssertError|AssertTrue|CharAtIndex|CreateDirectory|DateToString|DeleteItem|DirectoryCopy|DirectoryExists|DirectoryMove|Divide|DoNothing|DoXTimes|ElementAtIndex|EnforceSchema|EntityCombine|EntityGetValue|EntityHasProperty|EntityMap|EntityMapProperties|EntitySetValue|Equals|FileCopy|FileExists|FileExtract|FileMove|FileRead|FileWrite|FindElement|FindLastSubstring|FindSubstring|For|ForEach|FromConcordance|FromCSV|FromIDX|FromJson|FromJsonArray|GenerateDocumentation|GetSubstring|GetVariable|GreaterThan|GreaterThanOrEqual|Hash|If|IncrementVariable|LessThan|LessThanOrEqual|Log|Modulo|Not|NotEquals|Or|PathCombine|Power|Print|Product|ReadStandardIn|RegexMatch|RegexReplace|Repeat|RunExternalProcess|Sequence|SetVariable|StringContains|StringIsEmpty|StringJoin|StringLength|StringSplit|StringToCase|StringToDate|StringTrim|Subtract|Sum|ToConcordance|ToCSV|ToIDX|ToJson|ToJsonArray|ValueIf|While|WriteStandardError|WriteStandardOut|NuixAddConcordance|NuixAddItem|NuixAddToItemSet|NuixAddToProductionSet|NuixAnnotateDocumentIdList|NuixAssertPrintPreviewState|NuixAssignCustodian|NuixCloseConnection|NuixCountItems|NuixCreateCase|NuixCreateIrregularItemsReport|NuixCreateNRTReport|NuixCreateReport|NuixCreateTermList|NuixDoesCaseExist|NuixExportConcordance|NuixExtractEntities|NuixGeneratePrintPreviews|NuixGetItemProperties|NuixImportDocumentIds|NuixMigrateCase|NuixOpenCase|NuixOpenConnection|NuixPerformOCR|NuixRemoveFromProductionSet|NuixReorderProductionSet|NuixSearchAndTag|NuixRunScript|CreateMsSQLConnectionString|CreateMySQLConnectionString|CreatePostgresConnectionString|SqlCommand|SqlCreateSchemaFromTable|SqlCreateTable|SqlInsert|SqlQuery|DatabaseType|DeduplicateBy|EncodingEnum|ErrorBehavior|HashAlgorithm|ItemSetDeduplication|PrintPreviewState|ProductionSetSortOrder|TextCase|TrimSide)\b
        name: support.class.scl
    

        
                    
